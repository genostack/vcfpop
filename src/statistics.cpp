/* Statistics Functions */

#include "vcfpop.h"

/* Gamma function */
TARGET double Gamma1(double x)
{
	static double gam1_coef[] = { 0.99999999999980993, 676.5203681218851, -1259.1392167224028, 771.32342877765313, -176.61502916214059, 12.507343278686905, -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7 };
	int g = 7;
	if (x < 0.5) return PI / (sin(PI * x) * Gamma1(1 - x));
	x -= 1;
	double a = gam1_coef[0];
	double t = x + g + 0.5;
	for (int i = 1; i < 9; ++i)
		a += gam1_coef[i] / (x + i);
	return 2.5066282746310005 * pow(t, x + 0.5) * exp(-t) * a;
}

/* Natural logarithm of Gamma function */
TARGET double LogGamma1(double x)
{
	static double re[] = { 0,0.00000000000000e+00,0.00000000000000e+00,6.93147180559945e-01,1.79175946922805e+00,3.17805383034795e+00,4.78749174278205e+00,6.57925121201010e+00,8.52516136106541e+00,1.06046029027453e+01,1.28018274800815e+01,1.51044125730755e+01,1.75023078458739e+01,1.99872144956619e+01,2.25521638531234e+01,2.51912211827387e+01,2.78992713838409e+01,3.06718601060807e+01,3.35050734501369e+01,3.63954452080331e+01,3.93398841871995e+01,4.23356164607535e+01,4.53801388984769e+01,4.84711813518352e+01,5.16066755677644e+01,5.47847293981123e+01,5.80036052229805e+01,6.12617017610020e+01,6.45575386270063e+01,6.78897431371815e+01,7.12570389671680e+01,7.46582363488302e+01,7.80922235533153e+01,8.15579594561150e+01,8.50544670175815e+01,8.85808275421977e+01,9.21361756036871e+01,9.57196945421432e+01,9.93306124547874e+01,1.02968198614514e+02,1.06631760260643e+02,1.10320639714757e+02,1.14034211781462e+02,1.17771881399745e+02,1.21533081515439e+02,1.25317271149357e+02,1.29123933639127e+02,1.32952575035616e+02,1.36802722637326e+02,1.40673923648234e+02,1.44565743946345e+02,1.48477766951773e+02,1.52409592584497e+02,1.56360836303079e+02,1.60331128216631e+02,1.64320112263195e+02,1.68327445448428e+02,1.72352797139163e+02,1.76395848406997e+02,1.80456291417544e+02,1.84533828861449e+02,1.88628173423672e+02,1.92739047287845e+02,1.96866181672890e+02,2.01009316399282e+02,2.05168199482641e+02,2.09342586752537e+02,2.13532241494563e+02,2.17736934113954e+02,2.21956441819130e+02,2.26190548323728e+02,2.30439043565777e+02,2.34701723442818e+02,2.38978389561834e+02,2.43268849002983e+02,2.47572914096187e+02,2.51890402209723e+02,2.56221135550010e+02,2.60564940971863e+02,2.64921649798553e+02,2.69291097651020e+02,2.73673124285694e+02,2.78067573440366e+02,2.82474292687630e+02,2.86893133295427e+02,2.91323950094270e+02,2.95766601350761e+02,3.00220948647014e+02,3.04686856765669e+02,3.09164193580147e+02,3.13652829949879e+02,3.18152639620209e+02,3.22663499126726e+02,3.27185287703775e+02,3.31717887196928e+02,3.36261181979198e+02,3.40815058870799e+02,3.45379407062267e+02,3.49954118040770e+02,3.54539085519441e+02,3.59134205369575e+02,3.63739375555563e+02,3.68354496072405e+02,3.72979468885689e+02,3.77614197873919e+02,3.82258588773060e+02,3.86912549123218e+02,3.91575988217330e+02,3.96248817051791e+02,4.00930948278916e+02,4.05622296161145e+02,4.10322776526937e+02,4.15032306728250e+02,4.19750805599545e+02,4.24478193418257e+02,4.29214391866652e+02,4.33959323995015e+02,4.38712914186121e+02,4.43475088120919e+02,4.48245772745385e+02,4.53024896238496e+02,4.57812387981278e+02,4.62608178526875e+02,4.67412199571608e+02,4.72224383926981e+02,4.77044665492586e+02,4.81872979229888e+02,4.86709261136839e+02,4.91553448223298e+02,4.96405478487218e+02,5.01265290891579e+02,5.06132825342035e+02,5.11008022665236e+02,5.15890824587823e+02,5.20781173716044e+02,5.25679013515995e+02,5.30584288294434e+02,5.35496943180170e+02,5.40416924105998e+02,5.45344177791155e+02,5.50278651724286e+02,5.55220294146895e+02,5.60169054037273e+02,5.65124881094874e+02,5.70087725725134e+02,5.75057539024710e+02,5.80034272767131e+02,5.85017879388839e+02,5.90008311975618e+02,5.95005524249382e+02,6.00009470555327e+02,6.05020105849424e+02,6.10037385686239e+02,6.15061266207085e+02,6.20091704128477e+02,6.25128656730891e+02,6.30172081847810e+02,6.35221937855060e+02,6.40278183660408e+02,6.45340778693435e+02,6.50409682895655e+02,6.55484856710889e+02,6.60566261075874e+02,6.65653857411106e+02,6.70747607611913e+02,6.75847474039737e+02,6.80953419513638e+02,6.86065407301994e+02,6.91183401114411e+02,6.96307365093814e+02,7.01437263808737e+02,7.06573062245787e+02,7.11714725802290e+02,7.16862220279104e+02,7.22015511873601e+02,7.27174567172816e+02,7.32339353146739e+02,7.37509837141777e+02,7.42685986874351e+02,7.47867770424643e+02,7.53055156230484e+02,7.58248113081374e+02,7.63446610112640e+02,7.68650616799717e+02,7.73860102952558e+02,7.79075038710167e+02,7.84295394535246e+02,7.89521141208959e+02,7.94752249825813e+02,7.99988691788643e+02,8.05230438803703e+02,8.10477462875864e+02,8.15729736303910e+02,8.20987231675938e+02,8.26249921864843e+02,8.31517780023906e+02,8.36790779582470e+02,8.42068894241700e+02,8.47352097970438e+02,8.52640365001133e+02,8.57933669825857e+02,8.63231987192405e+02,8.68535292100465e+02,8.73843559797866e+02,8.79156765776908e+02,8.84474885770752e+02,8.89797895749890e+02,8.95125771918680e+02,9.00458490711945e+02,9.05796028791646e+02,9.11138363043611e+02,9.16485470574329e+02,9.21837328707805e+02,9.27193914982477e+02,9.32555207148186e+02,9.37921183163208e+02,9.43291821191336e+02,9.48667099599020e+02,9.54046996952560e+02,9.59431492015349e+02,9.64820563745166e+02,9.70214191291518e+02,9.75612353993036e+02,9.81015031374908e+02,9.86422203146368e+02,9.91833849198223e+02,9.97249949600428e+02,1.00267048459970e+03,1.00809543461718e+03,1.01352478024614e+03,1.01895850224969e+03,1.02439658155861e+03,1.02983899926914e+03,1.03528573664080e+03,1.04073677509437e+03,1.04619209620972e+03,1.05165168172387e+03,1.05711551352890e+03,1.06258357367003e+03,1.06805584434370e+03,1.07353230789563e+03,1.07901294681897e+03,1.08449774375247e+03,1.08998668147862e+03,1.09547974292196e+03,1.10097691114726e+03,1.10647816935780e+03,1.11198350089373e+03,1.11749288923036e+03,1.12300631797653e+03,1.12852377087299e+03,1.13404523179085e+03,1.13957068472998e+03,1.14510011381750e+03,1.15063350330622e+03,1.15617083757324e+03,1.16171210111840e+03,1.16725727856288e+03,1.17280635464778e+03,1.17835931423270e+03,1.18391614229440e+03,1.18947682392541e+03,1.19504134433273e+03,1.20060968883650e+03,1.20618184286867e+03,1.21175779197182e+03,1.21733752179781e+03,1.22292101810659e+03,1.22850826676499e+03,1.23409925374550e+03,1.23969396512510e+03,1.24529238708410e+03,1.25089450590498e+03,1.25650030797128e+03,1.26210977976646e+03,1.26772290787285e+03,1.27333967897051e+03,1.27896007983623e+03,1.28458409734242e+03,1.29021171845611e+03,1.29584293023793e+03,1.30147771984110e+03,1.30711607451043e+03,1.31275798158137e+03,1.31840342847902e+03,1.32405240271718e+03,1.32970489189745e+03,1.33536088370827e+03,1.34102036592402e+03,1.34668332640416e+03,1.35234975309227e+03,1.35801963401525e+03,1.36369295728243e+03,1.36936971108469e+03,1.37504988369371e+03,1.38073346346105e+03,1.38642043881739e+03,1.39211079827171e+03,1.39780453041052e+03,1.40350162389702e+03,1.40920206747041e+03,1.41490584994507e+03,1.42061296020982e+03,1.42632338722719e+03,1.43203712003270e+03,1.43775414773411e+03,1.44347445951071e+03,1.44919804461267e+03,1.45492489236025e+03,1.46065499214323e+03,1.46638833342013e+03,1.47212490571760e+03,1.47786469862978e+03,1.48360770181759e+03,1.48935390500813e+03,1.49510329799404e+03,1.50085587063287e+03,1.50661161284645e+03,1.51237051462033e+03,1.51813256600311e+03,1.52389775710590e+03,1.52966607810169e+03,1.53543751922482e+03,1.54121207077037e+03,1.54698972309359e+03,1.55277046660938e+03,1.55855429179171e+03,1.56434118917308e+03,1.57013114934397e+03,1.57592416295236e+03,1.58172022070312e+03,1.58751931335758e+03,1.59332143173296e+03,1.59912656670188e+03,1.60493470919186e+03,1.61074585018483e+03,1.61655998071666e+03,1.62237709187662e+03,1.62819717480697e+03,1.63402022070246e+03,1.63984622080984e+03,1.64567516642745e+03,1.65150704890473e+03,1.65734185964179e+03,1.66317959008896e+03,1.66902023174633e+03,1.67486377616337e+03,1.68071021493842e+03,1.68655953971837e+03,1.69241174219814e+03,1.69826681412035e+03,1.70412474727483e+03,1.70998553349830e+03,1.71584916467389e+03,1.72171563273083e+03,1.72758492964396e+03,1.73345704743344e+03,1.73933197816429e+03,1.74520971394607e+03,1.75109024693247e+03,1.75697356932096e+03,1.76285967335241e+03,1.76874855131074e+03,1.77464019552257e+03,1.78053459835683e+03,1.78643175222447e+03,1.79233164957805e+03,1.79823428291145e+03,1.80413964475951e+03,1.81004772769768e+03,1.81595852434172e+03,1.82187202734735e+03,1.82778822940996e+03,1.83370712326423e+03,1.83962870168388e+03,1.84555295748129e+03,1.85147988350726e+03,1.85740947265065e+03,1.86334171783810e+03,1.86927661203372e+03,1.87521414823880e+03,1.88115431949152e+03,1.88709711886665e+03,1.89304253947526e+03,1.89899057446444e+03,1.90494121701703e+03,1.91089446035131e+03,1.91685029772078e+03,1.92280872241381e+03,1.92876972775343e+03,1.93473330709705e+03,1.94069945383617e+03,1.94666816139616e+03,1.95263942323595e+03,1.95861323284782e+03,1.96458958375712e+03,1.97056846952202e+03,1.97654988373327e+03,1.98253382001396e+03,1.98852027201924e+03,1.99450923343613e+03,2.00050069798324e+03,2.00649465941055e+03,2.01249111149917e+03,2.01849004806111e+03,2.02449146293907e+03,2.03049535000618e+03,2.03650170316578e+03,2.04251051635123e+03,2.04852178352563e+03,2.05453549868167e+03,2.06055165584137e+03,2.06657024905587e+03,2.07259127240522e+03,2.07861471999818e+03,2.08464058597200e+03,2.09066886449223e+03,2.09669954975249e+03,2.10273263597429e+03,2.10876811740682e+03,2.11480598832674e+03,2.12084624303802e+03,2.12688887587170e+03,2.13293388118574e+03,2.13898125336478e+03,2.14503098682002e+03,2.15108307598894e+03,2.15713751533521e+03,2.16319429934844e+03,2.16925342254402e+03,2.17531487946295e+03,2.18137866467163e+03,2.18744477276174e+03,2.19351319834998e+03,2.19958393607799e+03,2.20565698061209e+03,2.21173232664317e+03,2.21780996888652e+03,2.22388990208162e+03,2.22997212099199e+03,2.23605662040507e+03,2.24214339513198e+03,2.24823244000743e+03,2.25432374988951e+03,2.26041731965955e+03,2.26651314422198e+03,2.27261121850415e+03,2.27871153745617e+03,2.28481409605078e+03,2.29091888928320e+03,2.29702591217094e+03,2.30313515975371e+03,2.30924662709321e+03,2.31536030927304e+03,2.32147620139852e+03,2.32759429859657e+03,2.33371459601552e+03,2.33983708882503e+03,2.34596177221593e+03,2.35208864140004e+03,2.35821769161010e+03,2.36434891809958e+03,2.37048231614258e+03,2.37661788103366e+03,2.38275560808775e+03,2.38889549263997e+03,2.39503753004556e+03,2.40118171567969e+03,2.40732804493736e+03,2.41347651323327e+03,2.41962711600172e+03,2.42577984869642e+03,2.43193470679044e+03,2.43809168577603e+03,2.44425078116452e+03,2.45041198848621e+03,2.45657530329025e+03,2.46274072114448e+03,2.46890823763537e+03,2.47507784836786e+03,2.48124954896527e+03,2.48742333506917e+03,2.49359920233928e+03,2.49977714645333e+03,2.50595716310698e+03,2.51213924801370e+03,2.51832339690463e+03,2.52450960552853e+03,2.53069786965162e+03,2.53688818505747e+03,2.54308054754695e+03,2.54927495293805e+03,2.55547139706584e+03,2.56166987578234e+03,2.56787038495638e+03,2.57407292047357e+03,2.58027747823614e+03,2.58648405416286e+03,2.59269264418896e+03,2.59890324426598e+03,2.60511585036173e+03,2.61133045846016e+03,2.61754706456124e+03,2.62376566468093e+03,2.62998625485103e+03,2.63620883111910e+03,2.64243338954838e+03,2.64865992621767e+03,2.65488843722126e+03,2.66111891866884e+03,2.66735136668539e+03,2.67358577741111e+03,2.67982214700131e+03,2.68606047162635e+03,2.69230074747152e+03,2.69854297073697e+03,2.70478713763764e+03,2.71103324440312e+03,2.71728128727763e+03,2.72353126251989e+03,2.72978316640305e+03,2.73603699521463e+03,2.74229274525638e+03,2.74855041284427e+03,2.75480999430833e+03,2.76107148599265e+03,2.76733488425524e+03,2.77360018546798e+03,2.77986738601652e+03,2.78613648230023e+03,2.79240747073209e+03,2.79868034773863e+03,2.80495510975987e+03,2.81123175324922e+03,2.81751027467338e+03,2.82379067051234e+03,2.83007293725924e+03,2.83635707142031e+03,2.84264306951482e+03,2.84893092807498e+03,2.85522064364589e+03,2.86151221278545e+03,2.86780563206429e+03,2.87410089806573e+03,2.88039800738567e+03,2.88669695663252e+03,2.89299774242719e+03,2.89930036140293e+03,2.90560481020535e+03,2.91191108549230e+03,2.91821918393381e+03,2.92452910221204e+03,2.93084083702119e+03,2.93715438506747e+03,2.94346974306899e+03,2.94978690775574e+03,2.95610587586948e+03,2.96242664416373e+03,2.96874920940366e+03,2.97507356836604e+03,2.98139971783920e+03,2.98772765462293e+03,2.99405737552845e+03,3.00038887737834e+03,3.00672215700648e+03,3.01305721125798e+03,3.01939403698913e+03,3.02573263106733e+03,3.03207299037106e+03,3.03841511178978e+03,3.04475899222391e+03,3.05110462858473e+03,3.05745201779439e+03,3.06380115678577e+03,3.07015204250248e+03,3.07650467189880e+03,3.08285904193960e+03,3.08921514960030e+03,3.09557299186681e+03,3.10193256573548e+03,3.10829386821305e+03,3.11465689631659e+03,3.12102164707344e+03,3.12738811752117e+03,3.13375630470753e+03,3.14012620569035e+03,3.14649781753758e+03,3.15287113732716e+03,3.15924616214699e+03,3.16562288909489e+03,3.17200131527854e+03,3.17838143781544e+03,3.18476325383285e+03,3.19114676046773e+03,3.19753195486673e+03,3.20391883418609e+03,3.21030739559164e+03,3.21669763625870e+03,3.22308955337209e+03,3.22948314412604e+03,3.23587840572416e+03,3.24227533537938e+03,3.24867393031391e+03,3.25507418775922e+03,3.26147610495595e+03,3.26787967915388e+03,3.27428490761191e+03,3.28069178759798e+03,3.28710031638904e+03,3.29351049127101e+03,3.29992230953872e+03,3.30633576849589e+03,3.31275086545506e+03,3.31916759773757e+03,3.32558596267351e+03,3.33200595760165e+03,3.33842757986946e+03,3.34485082683299e+03,3.35127569585690e+03,3.35770218431436e+03,3.36413028958704e+03,3.37056000906508e+03,3.37699134014701e+03,3.38342428023975e+03,3.38985882675854e+03,3.39629497712691e+03,3.40273272877665e+03,3.40917207914775e+03,3.41561302568838e+03,3.42205556585485e+03,3.42849969711155e+03,3.43494541693093e+03,3.44139272279347e+03,3.44784161218762e+03,3.45429208260977e+03,3.46074413156420e+03,3.46719775656310e+03,3.47365295512644e+03,3.48010972478201e+03,3.48656806306535e+03,3.49302796751973e+03,3.49948943569608e+03,3.50595246515300e+03,3.51241705345669e+03,3.51888319818093e+03,3.52535089690704e+03,3.53182014722383e+03,3.53829094672761e+03,3.54476329302212e+03,3.55123718371847e+03,3.55771261643517e+03,3.56418958879806e+03,3.57066809844027e+03,3.57714814300220e+03,3.58362972013147e+03,3.59011282748293e+03,3.59659746271857e+03,3.60308362350751e+03,3.60957130752599e+03,3.61606051245732e+03,3.62255123599182e+03,3.62904347582684e+03,3.63553722966669e+03,3.64203249522263e+03,3.64852927021282e+03,3.65502755236229e+03,3.66152733940295e+03,3.66802862907349e+03,3.67453141911940e+03,3.68103570729294e+03,3.68754149135307e+03,3.69404876906546e+03,3.70055753820243e+03,3.70706779654295e+03,3.71357954187259e+03,3.72009277198351e+03,3.72660748467438e+03,3.73312367775042e+03,3.73964134902333e+03,3.74616049631127e+03,3.75268111743883e+03,3.75920321023700e+03,3.76572677254315e+03,3.77225180220100e+03,3.77877829706057e+03,3.78530625497819e+03,3.79183567381645e+03,3.79836655144418e+03,3.80489888573640e+03,3.81143267457433e+03,3.81796791584535e+03,3.82450460744294e+03,3.83104274726671e+03,3.83758233322232e+03,3.84412336322151e+03,3.85066583518202e+03,3.85720974702759e+03,3.86375509668792e+03,3.87030188209868e+03,3.87685010120144e+03,3.88339975194368e+03,3.88995083227872e+03,3.89650334016576e+03,3.90305727356978e+03,3.90961263046159e+03,3.91616940881775e+03,3.92272760662056e+03,3.92928722185806e+03,3.93584825252395e+03,3.94241069661765e+03,3.94897455214418e+03,3.95553981711421e+03,3.96210648954402e+03,3.96867456745543e+03,3.97524404887584e+03,3.98181493183818e+03,3.98838721438088e+03,3.99496089454784e+03,4.00153597038844e+03,4.00811243995749e+03,4.01469030131521e+03,4.02126955252722e+03,4.02785019166450e+03,4.03443221680339e+03,4.04101562602555e+03,4.04760041741794e+03,4.05418658907279e+03,4.06077413908762e+03,4.06736306556515e+03,4.07395336661335e+03,4.08054504034536e+03,4.08713808487950e+03,4.09373249833925e+03,4.10032827885321e+03,4.10692542455510e+03,4.11352393358371e+03,4.12012380408292e+03,4.12672503420165e+03,4.13332762209384e+03,4.13993156591844e+03,4.14653686383939e+03,4.15314351402559e+03,4.15975151465088e+03,4.16636086389405e+03,4.17297155993877e+03,4.17958360097360e+03,4.18619698519198e+03,4.19281171079219e+03,4.19942777597732e+03,4.20604517895529e+03,4.21266391793881e+03,4.21928399114534e+03,4.22590539679711e+03,4.23252813312106e+03,4.23915219834886e+03,4.24577759071686e+03,4.25240430846611e+03,4.25903234984229e+03,4.26566171309573e+03,4.27229239648137e+03,4.27892439825877e+03,4.28555771669205e+03,4.29219235004991e+03,4.29882829660560e+03,4.30546555463688e+03,4.31210412242605e+03,4.31874399825987e+03,4.32538518042961e+03,4.33202766723098e+03,4.33867145696413e+03,4.34531654793363e+03,4.35196293844848e+03,4.35861062682205e+03,4.36525961137207e+03,4.37190989042066e+03,4.37856146229425e+03,4.38521432532360e+03,4.39186847784378e+03,4.39852391819415e+03,4.40518064471833e+03,4.41183865576420e+03,4.41849794968389e+03,4.42515852483372e+03,4.43182037957427e+03,4.43848351227026e+03,4.44514792129061e+03,4.45181360500839e+03,4.45848056180082e+03,4.46514879004924e+03,4.47181828813910e+03,4.47848905445994e+03,4.48516108740540e+03,4.49183438537317e+03,4.49850894676499e+03,4.50518476998662e+03,4.51186185344787e+03,4.51854019556252e+03,4.52521979474837e+03,4.53190064942716e+03,4.53858275802461e+03,4.54526611897037e+03,4.55195073069804e+03,4.55863659164511e+03,4.56532370025298e+03,4.57201205496692e+03,4.57870165423610e+03,4.58539249651352e+03,4.59208458025603e+03,4.59877790392430e+03,4.60547246598282e+03,4.61216826489988e+03,4.61886529914754e+03,4.62556356720166e+03,4.63226306754182e+03,4.63896379865137e+03,4.64566575901737e+03,4.65236894713061e+03,4.65907336148558e+03,4.66577900058044e+03,4.67248586291704e+03,4.67919394700089e+03,4.68590325134115e+03,4.69261377445060e+03,4.69932551484566e+03,4.70603847104634e+03,4.71275264157624e+03,4.71946802496258e+03,4.72618461973610e+03,4.73290242443112e+03,4.73962143758551e+03,4.74634165774064e+03,4.75306308344144e+03,4.75978571323629e+03,4.76650954567711e+03,4.77323457931928e+03,4.77996081272164e+03,4.78668824444649e+03,4.79341687305957e+03,4.80014669713006e+03,4.80687771523055e+03,4.81360992593701e+03,4.82034332782885e+03,4.82707791948882e+03,4.83381369950307e+03,4.84055066646107e+03,4.84728881895566e+03,4.85402815558302e+03,4.86076867494263e+03,4.86751037563728e+03,4.87425325627307e+03,4.88099731545938e+03,4.88774255180887e+03,4.89448896393744e+03,4.90123655046427e+03,4.90798531001176e+03,4.91473524120555e+03,4.92148634267449e+03,4.92823861305063e+03,4.93499205096923e+03,4.94174665506871e+03,4.94850242399070e+03,4.95525935637994e+03,4.96201745088437e+03,4.96877670615504e+03,4.97553712084612e+03,4.98229869361492e+03,4.98906142312186e+03,4.99582530803042e+03,5.00259034700720e+03,5.00935653872186e+03,5.01612388184712e+03,5.02289237505877e+03,5.02966201703563e+03,5.03643280645953e+03,5.04320474201537e+03,5.04997782239103e+03,5.05675204627739e+03,5.06352741236832e+03,5.07030391936070e+03,5.07708156595433e+03,5.08386035085202e+03,5.09064027275949e+03,5.09742133038542e+03,5.10420352244143e+03,5.11098684764204e+03,5.11777130470467e+03,5.12455689234968e+03,5.13134360930029e+03,5.13813145428260e+03,5.14492042602559e+03,5.15171052326110e+03,5.15850174472383e+03,5.16529408915130e+03,5.17208755528388e+03,5.17888214186475e+03,5.18567784763993e+03,5.19247467135820e+03,5.19927261177118e+03,5.20607166763324e+03,5.21287183770154e+03,5.21967312073601e+03,5.22647551549934e+03,5.23327902075694e+03,5.24008363527701e+03,5.24688935783042e+03,5.25369618719081e+03,5.26050412213452e+03,5.26731316144056e+03,5.27412330389067e+03,5.28093454826928e+03,5.28774689336345e+03,5.29456033796296e+03,5.30137488086022e+03,5.30819052085030e+03,5.31500725673089e+03,5.32182508730235e+03,5.32864401136762e+03,5.33546402773230e+03,5.34228513520455e+03,5.34910733259517e+03,5.35593061871753e+03,5.36275499238757e+03,5.36958045242383e+03,5.37640699764738e+03,5.38323462688189e+03,5.39006333895353e+03,5.39689313269104e+03,5.40372400692569e+03,5.41055596049125e+03,5.41738899222404e+03,5.42422310096285e+03,5.43105828554900e+03,5.43789454482628e+03,5.44473187764096e+03,5.45157028284181e+03,5.45840975928003e+03,5.46525030580933e+03,5.47209192128581e+03,5.47893460456804e+03,5.48577835451705e+03,5.49262316999626e+03,5.49946904987152e+03,5.50631599301111e+03,5.51316399828568e+03,5.52001306456832e+03,5.52686319073446e+03,5.53371437566196e+03,5.54056661823101e+03,5.54741991732419e+03,5.55427427182645e+03,5.56112968062506e+03,5.56798614260965e+03,5.57484365667220e+03,5.58170222170699e+03,5.58856183661065e+03,5.59542250028209e+03,5.60228421162257e+03,5.60914696953563e+03,5.61601077292708e+03,5.62287562070505e+03,5.62974151177993e+03,5.63660844506439e+03,5.64347641947337e+03,5.65034543392403e+03,5.65721548733583e+03,5.66408657863044e+03,5.67095870673178e+03,5.67783187056599e+03,5.68470606906144e+03,5.69158130114872e+03,5.69845756576061e+03,5.70533486183211e+03,5.71221318830040e+03,5.71909254410486e+03,5.72597292818705e+03,5.73285433949069e+03,5.73973677696169e+03,5.74662023954810e+03,5.75350472620014e+03,5.76039023587018e+03,5.76727676751271e+03,5.77416432008437e+03,5.78105289254394e+03,5.78794248385229e+03,5.79483309297244e+03,5.80172471886949e+03,5.80861736051066e+03,5.81551101686527e+03,5.82240568690470e+03,5.82930136960245e+03,5.83619806393407e+03,5.84309576887720e+03,5.84999448341153e+03,5.85689420651881e+03,5.86379493718286e+03,5.87069667438952e+03,5.87759941712667e+03,5.88450316438426e+03,5.89140791515422e+03,5.89831366843053e+03,5.90522042320918e+03,5.91212817848816e+03,5.91903693326748e+03,5.92594668654912e+03,5.93285743733708e+03,5.93976918463734e+03,5.94668192745783e+03,5.95359566480849e+03,5.96051039570121e+03,5.96742611914984e+03,5.97434283417019e+03,5.98126053978003e+03,5.98817923499905e+03,5.99509891884890e+03,6.00201959035315e+03,6.00894124853730e+03,6.01586389242877e+03,6.02278752105691e+03,6.02971213345296e+03,6.03663772865007e+03,6.04356430568329e+03,6.05049186358957e+03,6.05742040140773e+03,6.06434991817850e+03,6.07128041294445e+03 };
	if (x > 0 && x <= 1024 && x - (int)x < 1e-30)
		return re[(int)x];
	static double gam1ln_cof[] = { 1.000000000190015, 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.0012086509738662, -0.000005395239385 };
	if (x < 3.72008E-44) return LogGamma1(3.72008E-44);
	double y = x, ser = gam1ln_cof[0];
	for (int i = 1; i < 7; ++i)
		ser += (gam1ln_cof[i] / ++y);
	return log(2.5066282746310005 * ser / x) - (x + 5.5 - (x + 0.5) * log(x + 5.5));
}

/* Incomplete Gamma function */
TARGET double Gamma2(double a, double x)
{
	int n;
	double p, q, d, s, s1, p0, q0, p1, q1, qln;
	if (a <= 0.0 || x < 0.0)
		return -1;

	if (x + 1.0 == 1.0) return 0;
	if (x > 1.0e+35) return 1;
	qln = q = a * log(x);
	if (x < 1.0 + a)
	{
		p = a;
		d = 1.0 / a;
		s = d;
		for (n = 1; n <= 100; ++n)
		{
			p = 1.0 + p;
			d = d * x / p;
			s = s + d;
			if (abs(d) < abs(s) * 1.0e-07)
			{
				s *= exp(-x + qln - LogGamma1(a));
				return s;
			}
		}
	}
	else
	{
		s = 1.0 / x;
		p0 = 0.0;
		p1 = 1.0;
		q0 = 1.0;
		q1 = x;
		for (n = 1; n <= 100; ++n)
		{
			p0 = p1 + (n - a) * p0;
			q0 = q1 + (n - a) * q0;
			p = x * p0 + n * p1;
			q = x * q0 + n * q1;
			if (abs(q) + 1.0 != 1.0)
			{
				s1 = p / q;
				p1 = p;
				q1 = q;
				if (abs((s1 - s) / s1) < 1.0e-07)
				{
					s = exp(log(s1) - x + qln - LogGamma1(a));
					return 1.0 - s;
				}
				s = s1;
			}
			p1 = p;
			q1 = q;
		}
	}
	//s = 1.0 - s * exp(-x) * qq / Gamma1(a);
	s = 1.0 - exp(log(s) - x + qln - LogGamma1(a));
	return s;
}

/* Natural logarithm of incomplete Gamma function */
TARGET double LogGamma2(double a, double x)
{
	int n;
	double p, q, d, s, s1, p0, q0, p1, q1, qq;
	if (a <= 0.0 || x < 0.0)
		return -1;

	if (x + 1.0 == 1.0) return 0;
	if (x > 1.0e+35) return 1;
	q = a * log(x);
	qq = exp(q);
	if (x < 1.0 + a)
	{
		p = a;
		d = 1.0 / a;
		s = d;
		for (n = 1; n <= 100; ++n)
		{
			p = 1.0 + p;
			d = d * x / p;
			s = s + d;
			if (abs(d) < abs(s) * 1.0e-07)
			{
				s = s * exp(-x) * qq / Gamma1(a);
				return s;
			}
		}
	}
	else
	{
		s = 1.0 / x;
		p0 = 0.0;
		p1 = 1.0;
		q0 = 1.0;
		q1 = x;
		for (n = 1; n <= 100; ++n)
		{
			p0 = p1 + (n - a) * p0;
			q0 = q1 + (n - a) * q0;
			p = x * p0 + n * p1;
			q = x * q0 + n * q1;
			if (abs(q) + 1.0 != 1.0)
			{
				s1 = p / q;
				p1 = p;
				q1 = q;
				if (abs((s1 - s) / s1) < 1.0e-07)
				{
					s = s1 * exp(-x) * qq / Gamma1(a);
					return 1.0 - s;
				}
				s = s1;
			}
			p1 = p;
			q1 = q;
		}
	}
	s = 1.0 - s * exp(-x) * qq / Gamma1(a);
	return s;
}

/* Right tail probability of Chi-square distribution */
TARGET double ChiSquareProb(double x2, double df)
{
	if (!x2) return 1;
	if (x2 < 0.0) x2 = -x2;
	return 1 - Gamma2(df / 2.0, x2 / 2.0);
}

/* Random number generator */
#ifndef _RNG

/* Initialize rng */
TARGET RNG::RNG()
{
}

/* Initialize rng */
TARGET RNG::RNG(uint s)
{
	seed = s;
	state = 0;
	x = 123456789 ^ seed;
	y = 362436069 ^ (seed << 6);
	z = 521288629 ^ (seed << 12);
}

/* Draw a uniform distriubted interger */
TARGET uint RNG::XorShift96()
{
	uint t;
	x ^= x << 16;
	x ^= x >> 5;
	x ^= x << 1;
	t = x;

	x = y;
	y = z;
	z = t ^ x ^ y;
	return z;
}

/* Get a random sequence from 0 ~ n-1 */
TARGET void RNG::GetRandSeq(int *td, int n)
{
	for (int i = 0; i < n; ++i)
		td[i] = (int)((XorShift96() << 16) | i);
	QuickSort(td, 0, n - 1);
	for (int i = 0; i < n; ++i)
		td[i] &= 0xFFFF;
}

/* Draw a uniform distriubted real number */
TARGET double RNG::Uniform()
{
	return XorShift96() * 2.32830643653870e-10;
}

/* Draw a uniform distriubted real number */
TARGET double RNG::Uniform(double min, double max)
{
	return Uniform() * (max - min) + min;
}

/* Draw a uniform distriubted real number */
TARGET double RNG::Uniform(double max)
{
	return Uniform() * max;
}

/* Draw a uniform distriubted interger */
TARGET int RNG::Next(int min, int max)
{
	// will not equal to max
	return (XorShift96() + min) % (max - min);
}

/* Draw a uniform distriubted interger */
TARGET int RNG::Next(int max)
{
	// will not equal to max
	return XorShift96() % max;
}

/* Draw a uniform distriubted interger and avoid sample av */
TARGET int RNG::NextAvoid(int max, int av)
{
	int a = Next(max - 1);
	if (a >= av) a++;
	return a;
}

/* Draw a normally distriubted real number */
TARGET double RNG::Normal()
{
	//normal distribution
	if (state)
	{
		state = false;
		return U1 * sin(U2);
	}
	U1 = sqrt(-2 * log(Uniform()));
	U2 = 2 * PI * Uniform();
	return U1 * cos(U2);
}

/* Draw a normally distriubted real number */
TARGET double RNG::Normal(double mean, double std)
{
	return Normal() * std + mean;
}

/* Draw a polynormial distriubted integer */
TARGET int RNG::Poly(double *a, int n)
{
	//row unify
	double s = Sum(a, n) + DOUBLE_UNDERFLOW;
	double t = Uniform(s);
	for (int i = 0; i < n; ++i)
	{
		if (t < a[i]) return i;
		t -= a[i];
	}
	return n - 1;
}

/* Draw a polynormial distriubted integer with propoirtions in natural logarithm */
TARGET int RNG::PolyLog(double *a, int n)
{
	//proportional polynomial distribution, will overwrite a
	double maxval = GetMaxVal(a, n), s = DOUBLE_UNDERFLOW;
	for (int i = 0; i < n; ++i)
	{
		double diff = a[i] - maxval;
		a[i] = diff < -16 ? DOUBLE_UNDERFLOW : exp(diff);
		s += a[i];
	}

	double r = Uniform(s);
	for (int i = 0; i < n; ++i)
	{
		if (r < a[i]) return i;
		r -= a[i];
	}
	return n - 1;
}

/* Draw a real number from gamma distribution */
TARGET double RNG::Gamma(double alpha, double beta)
{
	//gamma distribution
	if (alpha < 1) return Gamma(1.0 + alpha, beta) * pow(Uniform(), 1.0 / alpha);
	double t, v, u;
	double d = alpha - 1.0 / 3.0;
	double c = (1.0 / 3.0) / sqrt(d);

	for (;;)
	{
		do
		{
			t = Normal();
			v = 1.0 + c * t;
		} while (v <= 0);

		v = v * v * v;
		u = Uniform();

		if (u < 1 - 0.0331 * t * t * t * t) break;
		if (log(u) < 0.5 * t * t + d * (1 - v + log(v))) break;
	}
	return beta * d * v;
}

/* Draw a real number from beta distribution */
TARGET double RNG::Beta(double a, double b)
{
	//Beta distribution
	double t = Gamma(a);
	return t / (t + Gamma(b));
}

/* Draw a vector from Dirichlet distribution D(a1 f, a2 f, ...) */
TARGET void RNG::Dirichlet(double *res, double *a, int n, double f)
{
	//Dirichlet distribution
	double s = 0;
	for (int i = 0; i < n; ++i)
	{
		res[i] = Gamma(a[i] * f);
		s += res[i];
	}
	Mul(res, 1.0 / s, n);
}

/* Draw a vector from Dirichlet distribution D(a1, a2, ...) */
TARGET void RNG::Dirichlet(double *res, double *a, int n)
{
	//Dirichlet distribution
	double s = 0;
	for (int i = 0; i < n; ++i)
	{
		res[i] = Gamma(a[i]);
		s += res[i];
	}
	Mul(res, 1.0 / s, n);
}

/* Draw a vector from Dirichlet distribution D(a1 + b1, a2 + b2, ...) */
TARGET void RNG::Dirichlet(double *res, double *a, double *b, int n)
{
	//Dirichlet distribution
	double s = 0;
	for (int i = 0; i < n; ++i)
	{
		res[i] = Gamma(a[i] + b[i]);
		s += res[i];
	}
	Mul(res, 1.0 / s, n);
}

/* Draw a vector from Dirichlet distribution D(a1 + b1, a2 + b2, ...) */
TARGET void RNG::Dirichlet(double *res, double *a, int *b, int n)
{
	//Dirichlet distribution
	double s = 0;
	for (int i = 0; i < n; ++i)
	{
		res[i] = Gamma(a[i] + b[i]);
		s += res[i];
	}
	Mul(res, 1.0 / s, n);
}
#endif

/* Input a vector, return proportion of grids with exp < threshold and two mininum indices */
TARGET double FindMinIndex(double *exp, int m, int &i1, int &i2, double threshold)
{
	int nle = 0;
	double minval1 = 1e300, minval2 = 1e300;
	i1 = i2 = 0xFFFFFFFF;
	for (int i = 0; i < m; ++i)
	{
		if (exp[i] < threshold)
			nle++;
		if (exp[i] < minval1)
		{
			minval2 = minval1;
			i2 = i1;

			minval1 = exp[i];
			i1 = i;
		}
		else if (exp[i] < minval2)
		{
			minval2 = exp[i];
			i2 = i;
		}
	}

	return nle / (double)m;
}

/* Input a column, return proportion of grids with exp < threshold and two mininum indices */
TARGET double FindMinIndex(double *exp, int m, int n, int &i1, int &j1, int &i2, int &j2, double threshold)
{
	int nle = 0;
	double minval1 = 1e300, minval2 = 1e300;
	i1 = j1 = i2 = j2 = 0xFFFFFFFF;
	for (int i = 0; i < m; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			if (exp[i * n + j] < threshold)
				nle++;
			if (exp[i * n + j] < minval1)
			{
				minval2 = minval1;
				i2 = i1;
				j2 = j1;

				minval1 = exp[i * n + j];
				i1 = i;
				j1 = j;
			}
			else if (exp[i * n + j] < minval2)
			{
				minval2 = exp[i * n + j];
				i2 = i;
				j2 = j;
			}
		}
	}
	return nle / (double)(m * n);
}

/* strcmp two rows */
TARGET int CompareRow(double *obs, int n, int r1, int r2)
{
	for (int j = 0; j < n; ++j)
		if (obs[r1 * n + j] > obs[r2 * n + j]) return 1;
		else if (obs[r1 * n + j] < obs[r2 * n + j]) return -1;
	return 0;
}

/* strcmp two columns */
TARGET int CompareCol(double *obs, int m, int n, int c1, int c2)
{
	for (int i = 0; i < m; ++i)
		if (obs[i * n + c1] > obs[i * n + c2]) return 1;
		else if (obs[i * n + c1] < obs[i * n + c2]) return -1;
	return 0;
}

/* Sort columns */
TARGET void SortCol(double *obs, int m, int n)
{
	for (int i = 0; i < n; ++i)
		for (int j = i + 1; j < n; ++j)
			if (CompareCol(obs, m, n, i, j) > 0)
				for (int k = 0; k < m; ++k)
					Swap(obs[k * n + i], obs[k * n + j]);
}

/* Chi-square test, combine tables with any grid with an expectition < 5 */
TARGET void CombineTable(double *obs, int m, int n, double &g, int &df, double &p, bool test, double *obs2, double *exp, double *exp2, double *rowsum, double *colsum)
{
	{
		SortCol(obs, m, n);
		for (int i = 0; i < m; ++i)
			rowsum[i] = Sum(obs + i * n, n);
		for (int j = 0; j < n; ++j)
			colsum[j] = Sum(obs + j, m, n);

		double invtot = Sum(rowsum, m);

		if (invtot < 0.5) return;
		invtot = 1.0 / invtot;

		for (int i = 0; i < m; ++i)
			for (int j = 0; j < n; ++j)
				exp[i * n + j] = rowsum[i] * colsum[j] * invtot;
	}

	if (m < 2 || n < 2) df = 0;
	else for (;;)
	{
		for (int i = 0; i < m; ++i)
			rowsum[i] = Sum(obs + i * n, n);
		for (int j = 0; j < n; ++j)
			colsum[j] = Sum(obs + j, m, n);

		int i1 = 0, i2 = 0, j1 = 0, j2 = 0;
		double rate = FindMinIndex(exp, m, n, i1, j1, i2, j2, 5.0);

		if (exp[i1 * n + j1] > 1.0 && rate < 0.2)
		{
			df = (m - 1) * (n - 1);
			break;
		}

		if (m == 2 && n == 2)
		{
			df = 0;
			break;
		}

		FindMinIndex(rowsum, m, i1, i2, 5.0);
		FindMinIndex(colsum, n, j1, j2, 5.0);

		int m1 = m, n1 = n;
		if (m > 2 && n > 2)
		{
			if (m >= n)
			{
				m1--;
				j1 = j2 = 0x7FFFFFFF;
			}
			else
			{
				n1--;
				i1 = i2 = 0x7FFFFFFF;
			}
		}
		else if (m > 2)
		{
			m1--;
			j1 = j2 = 0x7FFFFFFF;
		}
		else if (n > 2)
		{
			n1--;
			i1 = i2 = 0x7FFFFFFF;
		}

		SetZero(obs2, m1 * n1);
		SetZero(exp2, m1 * n1);
		for (int i = 0; i < m; ++i)
		{
			int r = i == i1 ? i2 : i;
			r = r > i1 ? r - 1 : r;
			for (int j = 0; j < n; ++j)
			{
				int c = j == j1 ? j2 : j;
				c = c > j1 ? c - 1 : c;
				obs2[r * n1 + c] += obs[i * n + j];
				exp2[r * n1 + c] += exp[i * n + j];
			}
		}

		m = m1; n = n1;
		Swap(obs, obs2);
		Swap(exp, exp2);
	}

	if (df > 0)
	{
		g = 0;
		for (int i = 0; i < m; ++i)
			for (int j = 0; j < n; ++j)
				if (obs[i * n + j] > 0)
					g += 2 * obs[i * n + j] * log(obs[i * n + j] / exp[i * n + j]);

		if (test) 
			p = ChiSquareProb(g, df);
	}
	else
	{
		g = 0;
		p = NA;
	}
}

/* Factorial */
TARGET double Factorial(int n)
{
	static double f[] =
	{
		1.00000000000000e00, 1.00000000000000e00, 2.00000000000000e00, 6.00000000000000e00, 2.40000000000000e01, 1.20000000000000e02, 7.20000000000000e02, 5.04000000000000e03,
		4.03200000000000e04, 3.62880000000000e05, 3.62880000000000e06, 3.99168000000000e07, 4.79001600000000e08, 6.22702080000000e09, 8.71782912000000e10, 1.30767436800000e12,
		2.09227898880000e13, 3.55687428096000e14, 6.40237370572800e15, 1.21645100408832e17, 2.43290200817664e18, 5.10909421717094e19, 1.12400072777761e21, 2.58520167388850e22,
		6.20448401733239e23, 1.55112100433310e25, 4.03291461126606e26, 1.08888694504184e28, 3.04888344611714e29, 8.84176199373970e30, 2.65252859812191e32, 8.22283865417792e33,
		2.63130836933694e35, 8.68331761881189e36, 2.95232799039604e38, 1.03331479663861e40, 3.71993326789901e41, 1.37637530912263e43, 5.23022617466601e44, 2.03978820811974e46,
		8.15915283247898e47, 3.34525266131638e49, 1.40500611775288e51, 6.04152630633738e52, 2.65827157478845e54, 1.19622220865480e56, 5.50262215981209e57, 2.58623241511168e59,
		1.24139155925361e61, 6.08281864034268e62, 3.04140932017134e64, 1.55111875328738e66, 8.06581751709439e67, 4.27488328406002e69, 2.30843697339241e71, 1.26964033536583e73,
		7.10998587804863e74, 4.05269195048772e76, 2.35056133128288e78, 1.38683118545690e80, 8.32098711274139e81, 5.07580213877225e83, 3.14699732603879e85, 1.98260831540444e87,
		1.26886932185884e89, 8.24765059208247e90, 5.44344939077443e92, 3.64711109181887e94, 2.48003554243683e96, 1.71122452428141e98, 1.19785716699699e100, 8.50478588567862e101,
		6.12344583768861e103, 4.47011546151269e105, 3.30788544151939e107, 2.48091408113954e109, 1.88549470166605e111, 1.45183092028286e113, 1.13242811782063e115, 8.94618213078298e116,
		7.15694570462638e118, 5.79712602074737e120, 4.75364333701284e122, 3.94552396972066e124, 3.31424013456535e126, 2.81710411438055e128, 2.42270953836727e130, 2.10775729837953e132,
		1.85482642257398e134, 1.65079551609085e136, 1.48571596448176e138, 1.35200152767840e140, 1.24384140546413e142, 1.15677250708164e144, 1.08736615665674e146, 1.03299784882391e148,
		9.91677934870949e149, 9.61927596824822e151, 9.42689044888325e153, 9.33262154439442e155, 9.33262154439442e157, 9.42594775983836e159, 9.61446671503513e161, 9.90290071648618e163,
		1.02990167451456e166, 1.08139675824029e168, 1.14628056373471e170, 1.22652020319614e172, 1.32464181945183e174, 1.44385958320249e176, 1.58824554152274e178, 1.76295255109025e180,
		1.97450685722107e182, 2.23119274865981e184, 2.54355973347219e186, 2.92509369349301e188, 3.39310868445190e190, 3.96993716080872e192, 4.68452584975429e194, 5.57458576120761e196,
		6.68950291344913e198, 8.09429852527344e200, 9.87504420083360e202, 1.21463043670253e205, 1.50614174151114e207, 1.88267717688893e209, 2.37217324288005e211, 3.01266001845766e213,
		3.85620482362581e215, 4.97450422247729e217, 6.46685548922047e219, 8.47158069087881e221, 1.11824865119600e224, 1.48727070609068e226, 1.99294274616152e228, 2.69047270731805e230,
		3.65904288195255e232, 5.01288874827499e234, 6.91778647261948e236, 9.61572319694109e238, 1.34620124757175e241, 1.89814375907617e243, 2.69536413788816e245, 3.85437071718007e247,
		5.55029383273931e249, 8.04792605747199e251, 1.17499720439091e254, 1.72724589045464e256, 2.55632391787286e258, 3.80892263763057e260, 5.71338395644586e262, 8.62720977423324e264,
		1.31133588568345e267, 2.00634390509568e269, 3.08976961384735e271, 4.78914290146339e273, 7.47106292628289e275, 1.17295687942641e278, 1.85327186949373e280, 2.94670227249504e282,
		4.71472363599206e284, 7.59070505394722e286, 1.22969421873945e289, 2.00440157654530e291, 3.28721858553430e293, 5.42391066613158e295, 9.00369170577843e297, 1.50361651486500e300,
		2.52607574497320e302, 4.26906800900471e304, 7.25741561530800e306
	};
	if (n <= 170) return f[n];
	return NA;
}

/* Binomial coefficient */
TARGET double Binomial(int n, int r)
{
	if (n <= 170)
		return Factorial(n) / Factorial(r) / Factorial(n - r);
	else
		return exp(LogGamma1(n + 1) - LogGamma1(r + 1) - LogGamma1(n - r + 1));
}

/* Natural logarithm of binomial coefficient */
TARGET double LogBinomial(int n, int r)
{
	return LogGamma1(n + 1) - LogGamma1(r + 1) - LogGamma1(n - r + 1);
}

/* Initialize BINOMIAL global variable */
TARGET void InitBinomial()
{
	for (int i = 0; i <= N_MAX_PLOIDY; ++i)
		for (int j = 0; j <= i; ++j)
			BINOMIAL[i][j] = (int)(Binomial(i, j) + 0.5);
}